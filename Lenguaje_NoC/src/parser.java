
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\004\000\002\005" +
    "\007\000\002\006\004\000\002\006\003\000\002\003\003" +
    "\000\002\003\004\000\002\004\010\000\002\004\007\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\005\000\002\011\004\000\002\011\006\000\002\012\005" +
    "\000\002\017\003\000\002\017\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\016\007\000\002" +
    "\016\005\000\002\016\012\000\002\016\007\000\002\016" +
    "\007\000\002\016\011\000\002\016\011\000\002\016\004" +
    "\000\002\016\004\000\002\016\005\000\002\016\004\000" +
    "\002\016\004\000\002\014\004\000\002\014\006\000\002" +
    "\014\012\000\002\015\005\000\002\015\010\000\002\024" +
    "\006\000\002\024\005\000\002\025\003\000\002\025\005" +
    "\000\002\020\003\000\002\020\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\006\000\002\022\003\000" +
    "\002\022\007\000\002\023\003\000\002\023\003\000\002" +
    "\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\004\006\001\002\000\004\002\233\001" +
    "\002\000\014\004\034\005\017\006\032\007\023\010\041" +
    "\001\002\000\004\011\007\001\002\000\004\054\010\001" +
    "\002\000\004\055\011\001\002\000\004\056\012\001\002" +
    "\000\042\003\033\004\034\005\017\006\032\007\023\010" +
    "\041\012\020\013\030\014\024\016\036\017\037\020\031" +
    "\022\021\023\035\024\040\033\025\001\002\000\014\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\001\002\000\006" +
    "\033\175\060\176\001\002\000\044\003\033\004\034\005" +
    "\017\006\032\007\023\010\041\012\020\013\030\014\024" +
    "\016\036\017\037\020\031\022\021\023\035\024\040\033" +
    "\025\057\174\001\002\000\004\062\172\001\002\000\006" +
    "\033\ufff7\060\ufff7\001\002\000\012\033\055\034\050\035" +
    "\047\054\053\001\002\000\004\062\167\001\002\000\004" +
    "\062\166\001\002\000\006\033\ufff5\060\ufff5\001\002\000" +
    "\014\004\034\005\017\006\032\007\023\010\041\001\002" +
    "\000\012\054\061\060\151\065\150\066\147\001\002\000" +
    "\004\062\146\001\002\000\044\003\uffee\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\016" +
    "\uffee\017\uffee\020\uffee\022\uffee\023\uffee\024\uffee\033\uffee" +
    "\057\uffee\001\002\000\004\054\142\001\002\000\004\054" +
    "\134\001\002\000\006\033\ufff6\060\ufff6\001\002\000\004" +
    "\062\133\001\002\000\006\033\ufff8\060\ufff8\001\002\000" +
    "\004\062\132\001\002\000\004\054\126\001\002\000\004" +
    "\056\012\001\002\000\004\033\042\001\002\000\006\033" +
    "\ufff4\060\ufff4\001\002\000\004\062\043\001\002\000\044" +
    "\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\033\uffe0\057\uffe0\001\002\000\004\016" +
    "\045\001\002\000\004\054\046\001\002\000\012\033\055" +
    "\034\050\035\047\054\053\001\002\000\042\015\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\055\uffc2\056\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\001\002\000\042\015\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\055\uffc3\056\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\001\002\000\042\015\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\055\uffc5\056\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002\000" +
    "\042\015\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\055\uffd3\056" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\001\002\000\012\033\055" +
    "\034\050\035\047\054\053\001\002\000\030\037\070\040" +
    "\065\041\067\042\073\043\075\044\076\045\066\046\072" +
    "\047\064\050\071\055\122\001\002\000\050\015\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\054\061\055\uffc7\056\uffc7\060" +
    "\062\061\uffc7\062\uffc7\063\uffc7\064\060\001\002\000\042" +
    "\015\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\055\uffc8\056\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\001\002\000\042\015\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\055\uffd4\056\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\001\002\000\004\033\117\001\002\000\014" +
    "\033\055\034\050\035\047\054\053\055\112\001\002\000" +
    "\012\033\055\034\050\035\047\054\053\001\002\000\030" +
    "\037\070\040\065\041\067\042\073\043\075\044\076\045" +
    "\066\046\072\047\064\050\071\061\074\001\002\000\012" +
    "\033\055\034\050\035\047\054\053\001\002\000\012\033" +
    "\055\034\050\035\047\054\053\001\002\000\012\033\055" +
    "\034\050\035\047\054\053\001\002\000\012\033\055\034" +
    "\050\035\047\054\053\001\002\000\012\033\055\034\050" +
    "\035\047\054\053\001\002\000\012\033\055\034\050\035" +
    "\047\054\053\001\002\000\012\033\055\034\050\035\047" +
    "\054\053\001\002\000\012\033\055\034\050\035\047\054" +
    "\053\001\002\000\042\015\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\055\uffc6\056\uffc6\061\uffc6\062\uffc6\063\uffc6\001\002" +
    "\000\012\033\055\034\050\035\047\054\053\001\002\000" +
    "\012\033\055\034\050\035\047\054\053\001\002\000\042" +
    "\015\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\047\064\050\071\055\uffcd\056\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\001\002\000\042\015\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\064\050\071\055\uffce\056\uffce\061\uffce\062" +
    "\uffce\063\uffce\001\002\000\042\015\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\075\044\076\045\066\046\072\047" +
    "\064\050\071\055\uffcf\056\uffcf\061\uffcf\062\uffcf\063\uffcf" +
    "\001\002\000\042\015\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\064\050\071" +
    "\055\uffcb\056\uffcb\061\uffcb\062\uffcb\063\uffcb\001\002\000" +
    "\042\015\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\055\uffc9\056" +
    "\uffc9\061\uffc9\062\uffc9\063\uffc9\001\002\000\042\015\uffd2" +
    "\037\uffd2\040\uffd2\041\067\042\073\043\075\044\076\045" +
    "\066\046\072\047\064\050\071\055\uffd2\056\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\001\002\000\042\015\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\075\044\076\045\066\046\072" +
    "\047\064\050\071\055\uffd0\056\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\001\002\000\042\015\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\064\050" +
    "\071\055\uffcc\056\uffcc\061\uffcc\062\uffcc\063\uffcc\001\002" +
    "\000\042\015\uffd1\037\uffd1\040\uffd1\041\067\042\073\043" +
    "\075\044\076\045\066\046\072\047\064\050\071\055\uffd1" +
    "\056\uffd1\061\uffd1\062\uffd1\063\uffd1\001\002\000\042\015" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\055\uffca\056\uffca\061" +
    "\uffca\062\uffca\063\uffca\001\002\000\034\037\070\040\065" +
    "\041\067\042\073\043\075\044\076\045\066\046\072\047" +
    "\064\050\071\055\uffd6\061\uffd6\063\uffd6\001\002\000\042" +
    "\015\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\055\uffd7\056\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\001\002\000\006\055\115\063" +
    "\114\001\002\000\012\033\055\034\050\035\047\054\053" +
    "\001\002\000\042\015\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\055\uffd8\056\uffd8\061\uffd8\062\uffd8\063\uffd8\001\002\000" +
    "\034\037\070\040\065\041\067\042\073\043\075\044\076" +
    "\045\066\046\072\047\064\050\071\055\uffd5\061\uffd5\063" +
    "\uffd5\001\002\000\004\054\120\001\002\000\004\055\121" +
    "\001\002\000\042\015\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\055\uffc4\056\uffc4\061\uffc4\062\uffc4\063\uffc4\001\002\000" +
    "\004\062\123\001\002\000\044\003\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\033\uffe3" +
    "\057\uffe3\001\002\000\030\037\070\040\065\041\067\042" +
    "\073\043\075\044\076\045\066\046\072\047\064\050\071" +
    "\055\125\001\002\000\042\015\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\055\uffc1\056\uffc1\061\uffc1\062\uffc1\063\uffc1\001" +
    "\002\000\012\033\055\034\050\035\047\054\053\001\002" +
    "\000\030\037\070\040\065\041\067\042\073\043\075\044" +
    "\076\045\066\046\072\047\064\050\071\055\130\001\002" +
    "\000\004\056\012\001\002\000\044\003\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\033" +
    "\uffe6\057\uffe6\001\002\000\044\003\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\033\uffe1" +
    "\057\uffe1\001\002\000\044\003\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\016\uffde" +
    "\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\033\uffde\057" +
    "\uffde\001\002\000\012\033\055\034\050\035\047\054\053" +
    "\001\002\000\030\037\070\040\065\041\067\042\073\043" +
    "\075\044\076\045\066\046\072\047\064\050\071\055\136" +
    "\001\002\000\004\056\012\001\002\000\046\003\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\016\uffe5\017\uffe5\020\uffe5\021\140\022\uffe5\023" +
    "\uffe5\024\uffe5\033\uffe5\057\uffe5\001\002\000\004\056\012" +
    "\001\002\000\044\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\022\uffe4\023\uffe4\024\uffe4\033\uffe4\057\uffe4\001" +
    "\002\000\012\033\055\034\050\035\047\054\053\001\002" +
    "\000\030\037\070\040\065\041\067\042\073\043\075\044" +
    "\076\045\066\046\072\047\064\050\071\055\144\001\002" +
    "\000\004\062\145\001\002\000\044\003\uffe9\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\033" +
    "\uffe9\057\uffe9\001\002\000\044\003\uffec\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec\016" +
    "\uffec\017\uffec\020\uffec\022\uffec\023\uffec\024\uffec\033\uffec" +
    "\057\uffec\001\002\000\012\033\055\034\050\035\047\054" +
    "\053\001\002\000\044\003\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf\033\uffdf\057\uffdf" +
    "\001\002\000\012\033\055\034\050\035\047\054\053\001" +
    "\002\000\030\037\070\040\065\041\067\042\073\043\075" +
    "\044\076\045\066\046\072\047\064\050\071\061\153\001" +
    "\002\000\004\066\154\001\002\000\012\033\055\034\050" +
    "\035\047\054\053\001\002\000\030\037\070\040\065\041" +
    "\067\042\073\043\075\044\076\045\066\046\072\047\064" +
    "\050\071\062\uffd9\001\002\000\030\037\070\040\065\041" +
    "\067\042\073\043\075\044\076\045\066\046\072\047\064" +
    "\050\071\062\uffda\001\002\000\004\033\160\001\002\000" +
    "\004\066\161\001\002\000\012\033\055\034\050\035\047" +
    "\054\053\001\002\000\030\015\163\037\070\040\065\041" +
    "\067\042\073\043\075\044\076\045\066\046\072\047\064" +
    "\050\071\001\002\000\012\033\055\034\050\035\047\054" +
    "\053\001\002\000\030\037\070\040\065\041\067\042\073" +
    "\043\075\044\076\045\066\046\072\047\064\050\071\056" +
    "\012\001\002\000\044\003\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\033\uffe7\057\uffe7" +
    "\001\002\000\044\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\022\uffeb\023\uffeb\024\uffeb\033\uffeb\057\uffeb\001" +
    "\002\000\044\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\012\uffe2\013\uffe2\014\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\033\uffe2\057\uffe2\001\002" +
    "\000\030\037\070\040\065\041\067\042\073\043\075\044" +
    "\076\045\066\046\072\047\064\050\071\062\171\001\002" +
    "\000\044\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\033\uffe8\057\uffe8\001\002\000" +
    "\044\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\012\uffea\013\uffea\014\uffea\016\uffea\017\uffea\020\uffea\022" +
    "\uffea\023\uffea\024\uffea\033\uffea\057\uffea\001\002\000\044" +
    "\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\012" +
    "\uffed\013\uffed\014\uffed\016\uffed\017\uffed\020\uffed\022\uffed" +
    "\023\uffed\024\uffed\033\uffed\057\uffed\001\002\000\050\002" +
    "\uffef\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\013\uffef\014\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\024\uffef\033\uffef\057\uffef\001\002" +
    "\000\006\062\uffdd\066\205\001\002\000\004\061\177\001" +
    "\002\000\004\033\200\001\002\000\004\066\201\001\002" +
    "\000\004\060\202\001\002\000\012\033\055\034\050\035" +
    "\047\054\053\001\002\000\006\061\204\063\114\001\002" +
    "\000\004\062\uffdb\001\002\000\012\033\055\034\050\035" +
    "\047\054\053\001\002\000\030\037\070\040\065\041\067" +
    "\042\073\043\075\044\076\045\066\046\072\047\064\050" +
    "\071\062\uffdc\001\002\000\016\002\ufffd\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\001\002\000\004\002\000\001" +
    "\002\000\014\004\034\005\017\006\032\007\023\010\041" +
    "\001\002\000\004\033\213\001\002\000\004\054\214\001" +
    "\002\000\016\004\034\005\017\006\032\007\023\010\041" +
    "\055\220\001\002\000\006\055\ufff3\063\ufff3\001\002\000" +
    "\006\033\226\060\227\001\002\000\006\055\223\063\222" +
    "\001\002\000\004\056\012\001\002\000\016\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\001\002\000\014" +
    "\004\034\005\017\006\032\007\023\010\041\001\002\000" +
    "\004\056\012\001\002\000\016\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\001\002\000\006\055\ufff2\063" +
    "\ufff2\001\002\000\006\055\ufff1\063\ufff1\001\002\000\004" +
    "\061\230\001\002\000\004\033\231\001\002\000\006\055" +
    "\ufff0\063\ufff0\001\002\000\016\002\ufffe\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\006\002\003\005\004\001\001\000\002\001" +
    "\001\000\012\003\210\004\206\006\207\007\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\012\001\001\000\016\007\013\014\025\015\021" +
    "\016\026\017\014\024\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\013\014\025\015\021\016\172" +
    "\024\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\167\021\056\022\051\023\055\024\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\053\021\056\022\051\023\055\024\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\123\021\056\022\051\023\055\024\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\110" +
    "\021\056\022\051\023\055\024\050\025\112\001\001\000" +
    "\014\020\062\021\056\022\051\023\055\024\050\001\001" +
    "\000\002\001\001\000\014\020\107\021\056\022\051\023" +
    "\055\024\050\001\001\000\014\020\106\021\056\022\051" +
    "\023\055\024\050\001\001\000\014\020\105\021\056\022" +
    "\051\023\055\024\050\001\001\000\014\020\104\021\056" +
    "\022\051\023\055\024\050\001\001\000\014\020\103\021" +
    "\056\022\051\023\055\024\050\001\001\000\014\020\102" +
    "\021\056\022\051\023\055\024\050\001\001\000\014\020" +
    "\101\021\056\022\051\023\055\024\050\001\001\000\014" +
    "\020\100\021\056\022\051\023\055\024\050\001\001\000" +
    "\002\001\001\000\014\020\077\021\056\022\051\023\055" +
    "\024\050\001\001\000\014\020\076\021\056\022\051\023" +
    "\055\024\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\115\021\056\022\051" +
    "\023\055\024\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\126\021\056\022\051\023\055" +
    "\024\050\001\001\000\002\001\001\000\004\012\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\134\021\056\022\051\023\055\024\050\001" +
    "\001\000\002\001\001\000\004\012\136\001\001\000\002" +
    "\001\001\000\004\012\140\001\001\000\002\001\001\000" +
    "\014\020\142\021\056\022\051\023\055\024\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\155\021\056\022\051\023\055" +
    "\024\050\001\001\000\002\001\001\000\014\020\151\021" +
    "\056\022\051\023\055\024\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\154\021\056\022\051\023" +
    "\055\024\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\161\021" +
    "\056\022\051\023\055\024\050\001\001\000\002\001\001" +
    "\000\014\020\163\021\056\022\051\023\055\024\050\001" +
    "\001\000\004\012\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\110\021\056" +
    "\022\051\023\055\024\050\025\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\205\021\056\022\051" +
    "\023\055\024\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\231\007\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\215\010" +
    "\216\011\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\220\001\001\000\002\001" +
    "\001\000\006\007\215\011\224\001\001\000\004\012\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        System.err.println("Error de sintaxis: " + message);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= funcionPrincipal funcionesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // funcionPrincipal ::= ENTERO INICIO LPAR RPAR bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcionesAux ::= listaFunciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionesAux",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcionesAux ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionesAux",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listaFunciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaFunciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listaFunciones ::= listaFunciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaFunciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= tipo ID LPAR parametros RPAR bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= tipo ID LPAR RPAR bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= VACIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro ::= tipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro ::= tipo LBRACK RBRACK ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque ::= LLLAVE sentencias RLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= declaracion PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= asignacion PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= llamadoFuncion PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= MOSTRAR LPAR expresion RPAR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= RETORNO expresion PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= PARA tipo ID ASIGNACION expresion HASTA expresion bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= MIENTRAS LPAR expresion RPAR bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= SI LPAR expresion RPAR bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= SI LPAR expresion RPAR bloque SINO bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= HACER bloque MIENTRAS LPAR expresion RPAR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= SALTEAR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= CONTINUAR PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= IRA ID PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= ID DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion ::= tipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion ::= tipo ID ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion ::= tipo LBRACK RBRACK ID ASIGNACION LBRACK listaArgumentos RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= ID ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion ::= ID LBRACK expresion RBRACK ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // llamadoFuncion ::= ID LPAR listaArgumentos RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // llamadoFuncion ::= ID LPAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadoFuncion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listaArgumentos ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaArgumentos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listaArgumentos ::= listaArgumentos COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaArgumentos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresionBinaria 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresionBinaria ::= expresion MAS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresionBinaria ::= expresion MENOS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresionBinaria ::= expresion POR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresionBinaria ::= expresion DIV expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresionBinaria ::= expresion IGUALIGUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresionBinaria ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresionBinaria ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresionBinaria ::= expresion MAYOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresionBinaria ::= expresion Y expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresionBinaria ::= expresion O expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBinaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // termino ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // termino ::= ID LBRACK expresion RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // termino ::= llamadoFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // termino ::= ID PUNTO ID LPAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= LPAR expresion RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
